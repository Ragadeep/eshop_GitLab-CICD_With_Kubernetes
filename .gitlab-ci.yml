# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

before_script:
  - |
    # Delete Docker images only if this is the first job in the pipeline
    if [ "$CI_JOB_NAME" == "$CI_PIPELINE_SOURCE" ]; then
      if [ "$(docker images -q | wc -l)" -gt 0 ]; then
        docker rmi --force $(docker images -q)
      else
        echo "No Docker images to delete."
      fi
    fi

stages:
- sonar
- test
- filescan
- build
- imagescan
- push
- deploy
- review
- dast
- staging
- canary
- production
- incremental rollout 10%
- incremental rollout 25%
- incremental rollout 50%
- incremental rollout 100%
- performance
- cleanup

variables:
  VERSION: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
  DOCKER_REGISTRY: eshopimages.azurecr.io
  ADSERVICE_TAG: eshopimages.azurecr.io/eshop/adservice
  CARTSERVICE_TAG: eshopimages.azurecr.io/eshop/cartservice
  CHECKOUTSERVICE_TAG: eshopimages.azurecr.io/eshop/checkoutservice
  CURRENCYSERVICE_TAG: eshopimages.azurecr.io/eshop/currencyservice
  EMAILSERVICE_TAG: eshopimages.azurecr.io/eshop/emailservice
  FRONTEND_TAG: eshopimages.azurecr.io/eshop/frontend
  LOADGENERATOR_TAG: eshopimages.azurecr.io/eshop/loadgenerator
  PAYMENTSERVICE_TAG: eshopimages.azurecr.io/eshop/paymentservice
  PRODUCTCATALOGSERVICE_TAG: eshopimages.azurecr.io/eshop/productcatalogservice
  RECOMMENDATIONSERVICE_TAG: eshopimages.azurecr.io/eshop/recommendationservice
  SHIPPINGSERVICE_TAG: eshopimages.azurecr.io/eshop/shippingservice

#Code Quality Scan
.sonarqube-check:
  stage: sonar
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_SCANNER_OPTS: "-Dsonar.exclusions=**/*.java"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner -X  # Enable full debug logging
  allow_failure: true
  only:
    - main

.sast:
  stage: test
  tags:
    - build
    - microservices
.include:
  - template: Auto-DevOps.gitlab-ci.yml

#File Scan with Trivy
Trivy_file_scan:
  stage: filescan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy fs . | tee trivy-file-scanning-report.txt  # Redirect and display output
  artifacts:
    paths:
      - trivy-file-scanning-report.txt  # Specify the path to the text file

#build docker images.
.build_image:
  stage: build
  tags:
    - build
    - microservices

build_adservice:
  extends: .build_image
  script:
    - docker build -t $ADSERVICE_TAG:$VERSION src/adservice

.build_cartservice:
  extends: .build_image
  script:
    - docker build -t $CARTSERVICE_TAG:$VERSION src/cartservice/src

.build_checkoutservice:
  extends: .build_image
  script:
    - docker build -t $CHECKOUTSERVICE_TAG:$VERSION src/checkoutservice

.build_currencyservice:
  extends: .build_image
  script:
    - docker build -t $CURRENCYSERVICE_TAG:$VERSION src/currencyservice

.build_emailservice:
  extends: .build_image
  script:
    - docker build -t $EMAILSERVICE_TAG:$VERSION src/checkoutservice

.build_frontend:
  extends: .build_image
  script:
    - docker build -t $FRONTEND_TAG:$VERSION src/frontend

.build_loadgenerator:
  extends: .build_image
  script:
    - docker build -t $LOADGENERATOR_TAG:$VERSION src/loadgenerator

.build_paymentservice:
  extends: .build_image
  script:
    - docker build -t $PAYMENTSERVICE_TAG:$VERSION src/paymentservice

.build_productcatalogservice:
  extends: .build_image
  script:
    - docker build -t $PRODUCTCATALOGSERVICE_TAG:$VERSION src/productcatalogservice

.build_recommendationservice:
  extends: .build_image
  script:
    - docker build -t $RECOMMENDATIONSERVICE_TAG:$VERSION src/recommendationservice

.build_shippingservice:
  extends: .build_image
  script:
    - docker build -t $SHIPPINGSERVICE_TAG:$VERSION src/shippingservice

#Image scanning with Trivy
.Trivy_image_scan: &image_scan
  stage: imagescan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  variables:
    FILENAME: ""           # Declare file name variable dynamically
    IMAGE: ""              # Declare image dynamically
  script:
    - trivy image $IMAGE | tee $FILENAME  # Redirect and display output

.Img_scan_adservice:
  <<: *image_scan
  variables:
    FILENAME: "adservice-image-scan-report.txt"           # Declare file name variable
    IMAGE: "$ADSERVICE_TAG:$VERSION"
  artifacts:
    paths:
      - trivy-file-scanning-report.txt  # Specify the path to the text file

image_scan_adservice:
  stage: imagescan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy image 23961cbcf0bf


#Push build images to ACR Container Registry
.push_image: &push_image
  stage: push
  tags:
    - build
    - microservices
  before_script:
    - docker login -u $ACR_USER -p $ACR_PASSWORD $DOCKER_REGISTRY

.push_adservice:
  <<: *push_image
  script:
    - docker push $ADSERVICE_TAG:$VERSION

.push_cartservice:
  <<: *push_image
  script:
    - docker push $CARTSERVICE_TAG:$VERSION

.push_checkoutservice:
  <<: *push_image
  script:
    - docker push $CHECKOUTSERVICE_TAG:$VERSION

.push_currencyservice:
  <<: *push_image
  script:
    - docker push $CURRENCYSERVICE_TAG:$VERSION

.push_emailservice:
  <<: *push_image
  script:
    - docker push $EMAILSERVICE_TAG:$VERSION

.push_frontend:
  <<: *push_image
  script:
    - docker push $FRONTEND_TAG:$VERSION

.push_loadgenerator:
  <<: *push_image
  script:
    - docker push $LOADGENERATOR_TAG:$VERSION

.push_paymentservice:
  <<: *push_image
  script:
    - docker push $PAYMENTSERVICE_TAG:$VERSION

.push_productcatalogservice:
  <<: *push_image
  script:
    - docker push $PRODUCTCATALOGSERVICE_TAG:$VERSION

.push_recommendationservice:
  <<: *push_image
  script:
    - docker push $RECOMMENDATIONSERVICE_TAG:$VERSION

.push_shippingservice:
  <<: *push_image
  script:
    - docker push $SHIPPINGSERVICE_TAG:$VERSION




.build_image3:
  stage: build
  tags:
    - build
    - microservices
  variables:
    VERSION: $CI_PIPELINE_ID
    ADSERVICE_TAG: eshopimages.azurecr.io/eshop/adservice
  script:
    - bash script/docker-release.sh $ADSERVICE_TAG services src/adservice


