# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

before_script:
  - |
    # Delete Docker images only if this is the first job in the pipeline
    if [ "$CI_JOB_NAME" == "$CI_PIPELINE_SOURCE" ]; then
      if [ "$(docker images -q | wc -l)" -gt 0 ]; then
        docker rmi --force $(docker images -q)
      else
        echo "No Docker images to delete."
      fi
    fi

stages:
- sonar
- test
- filescan
- build
- imagescan
- check
- push
- deploy
- review
- dast
- staging
- canary
- production
- incremental rollout 10%
- incremental rollout 25%
- incremental rollout 50%
- incremental rollout 100%
- performance
- cleanup

variables:
  VERSION: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
  DOCKER_REGISTRY: eshopimages.azurecr.io
  ADSERVICE_TAG: eshopimages.azurecr.io/eshop/adservice
  CARTSERVICE_TAG: eshopimages.azurecr.io/eshop/cartservice
  CHECKOUTSERVICE_TAG: eshopimages.azurecr.io/eshop/checkoutservice
  CURRENCYSERVICE_TAG: eshopimages.azurecr.io/eshop/currencyservice
  EMAILSERVICE_TAG: eshopimages.azurecr.io/eshop/emailservice
  FRONTEND_TAG: eshopimages.azurecr.io/eshop/frontend
  LOADGENERATOR_TAG: eshopimages.azurecr.io/eshop/loadgenerator
  PAYMENTSERVICE_TAG: eshopimages.azurecr.io/eshop/paymentservice
  PRODUCTCATALOGSERVICE_TAG: eshopimages.azurecr.io/eshop/productcatalogservice
  RECOMMENDATIONSERVICE_TAG: eshopimages.azurecr.io/eshop/recommendationservice
  SHIPPINGSERVICE_TAG: eshopimages.azurecr.io/eshop/shippingservice

#Code Quality Scan
.sonarqube-check:
  stage: sonar
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_SCANNER_OPTS: "-Dsonar.exclusions=**/*.java"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner -X  # Enable full debug logging
  allow_failure: true
  only:
    - main

.sast:
  stage: test
  tags:
    - build
    - microservices
.include:
  - template: Auto-DevOps.gitlab-ci.yml

#File Scan with Trivy
.Trivy_file_scan:
  stage: filescan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy fs . | tee trivy-file-scanning-report.txt  # Redirect and display output
  artifacts:
    paths:
      - trivy-file-scanning-report.txt  # Specify the path to the text file

#build docker images.
.include:
  - local: 'build.yml'
#  - local: 'imagescan.yml'
  - local: 'push.yml'


#Adding check   -- if a image containes more than 5 CRITICAL errors then pipeline fails.
.check_critical_errors:
  stage: check
  script:
    - |
      total_critical_errors=0
      for file in *.txt; do
        critical_errors=$(grep -c "CRITICAL" "$file")
        echo "File: $file, Critical errors: $critical_errors"
        if [ $critical_errors -gt 10 ]; then
          echo "File $file has more than 10 critical errors. Failing the pipeline."
          exit 1
        fi
        total_critical_errors=$((total_critical_errors + critical_errors))
      done
      echo "Total critical errors: $total_critical_errors"
      if [ $total_critical_errors -gt 10 ]; then
        echo "Total critical errors exceed threshold. Failing the pipeline."
        exit 1
      fi
  artifacts:
    paths:
      - "*.txt"
# allow_failure: true


#deploy to kubernetes
.deploy_to_kubernetes:
  stage: deploy
  tags:
    - build
    - microservices
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY 
  script:
    # Copy Kubernetes manifests to the target server
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY -r ./kubernetes-manifests raga@$KUBE_SERVER_IP:/home/raga/kube

    # Copy update_image_references.sh script to the target server
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./script/update_image_references.sh raga@$KUBE_SERVER_IP:/home/raga/kube/update_image_references.sh
    
    #Give Permission to bash file
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY raga@$KUBE_SERVER_IP 'chmod +x /home/raga/kube/update_image_references.sh'

    # Update the image references in YAML files
    #- ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY raga@$KUBE_SERVER_IP 'bash /home/raga/kube/update_image_references.sh "${VERSION}" "${ADSERVICE_TAG}"'

    # Execute the script on the target server after replacing variables
    - ssh -vvv -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY raga@$KUBE_SERVER_IP 'bash -s' < <(envsubst < /home/raga/kube/update_image_references_template.sh)


    # secure copy secret to remote server
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./script/acr_secret.sh raga@$KUBE_SERVER_IP:/home/raga/kube/acr_secret.sh

    # Execute the acr_secret.sh script remotely
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY raga@$KUBE_SERVER_IP 'bash /home/raga/kube/acr_secret.sh'
    
    # Apply Kubernetes manifests
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY raga@$KUBE_SERVER_IP "
        kubectl apply -f ~/kube/kubernetes-manifests/"

#deploy to kubernetes
.deploy_to_kubernetes2:
  stage: deploy
  tags:
    - build
    - microservices
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY 
    - export VERSION=$VERSION
    - export ADSERVICE_TAG=$ADSERVICE_TAG
    - export CARTSERVICE_TAG=$CARTSERVICE_TAG
    - export CHECKOUTSERVICE_TAG=CHECKOUTSERVICE_TAG
    - export CURRENCYSERVICE_TAG=$CURRENCYSERVICE_TAG
    - export EMAILSERVICE_TAG=$EMAILSERVICE_TAG
    - export FRONTEND_TAG=$FRONTEND_TAG
    - export LOADGENERATOR_TAG=$LOADGENERATOR_TAG
    - export PAYMENTSERVICE_TAG=$PAYMENTSERVICE_TAG
    - export PRODUCTCATALOGSERVICE_TAG=$PRODUCTCATALOGSERVICE_TAG
    - export RECOMMENDATIONSERVICE_TAG=$RECOMMENDATIONSERVICE_TAG
    - export SHIPPINGSERVICE_TAG=$SHIPPINGSERVICE_TAG
  script:
    # Copy Kubernetes manifests to the target server
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY -r ./kubernetes-manifests raga@$KUBE_SERVER_IP:/home/raga/kube

    # Copy update_image_references.sh script to the target server
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./script/update_image_references.sh raga@$KUBE_SERVER_IP:/home/raga/kube/update_image_references.sh
    
    #Give Permission to bash file
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY raga@$KUBE_SERVER_IP 'chmod +x /home/raga/kube/update_image_references.sh'

    # Execute the script on the target server after replacing variables
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY raga@$KUBE_SERVER_IP "
        export VERSION=$VERSION &&
        export ADSERVICE_TAG=$ADSERVICE_TAG &&
        "

    # secure copy secret to remote server
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./script/acr_secret.sh raga@$KUBE_SERVER_IP:/home/raga/kube/acr_secret.sh

    # Execute the acr_secret.sh script remotely
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY raga@$KUBE_SERVER_IP 'bash /home/raga/kube/acr_secret.sh'
    
    # Apply Kubernetes manifests
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY raga@$KUBE_SERVER_IP "
        kubectl apply -f ~/kube/kubernetes-manifests/" 

deploy_job:
  stage: deploy
  script:
    - sed -i 's/old_value/$NEW_VALUE/g' ./kubernetes-manifests/*  # Replace old_value with NEW_VALUE in files
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY -r ./kubernetes-manifests raga@$KUBE_SERVER_IP:/home/raga/kube
  variables:                    
    VERSION: "$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID"
    DOCKER_REGISTRY: "eshopimages.azurecr.io"
    ADSERVICE_TAG: "eshopimages.azurecr.io/eshop/adservice"
    CARTSERVICE_TAG: "eshopimages.azurecr.io/eshop/cartservice"
    CHECKOUTSERVICE_TAG: "eshopimages.azurecr.io/eshop/checkoutservice"
    CURRENCYSERVICE_TAG: "eshopimages.azurecr.io/eshop/currencyservice"
    EMAILSERVICE_TAG: "eshopimages.azurecr.io/eshop/emailservice"
    FRONTEND_TAG: "eshopimages.azurecr.io/eshop/frontend"
    LOADGENERATOR_TAG: "eshopimages.azurecr.io/eshop/loadgenerator"
    PAYMENTSERVICE_TAG: "eshopimages.azurecr.io/eshop/paymentservice"
    PRODUCTCATALOGSERVICE_TAG: "eshopimages.azurecr.io/eshop/productcatalogservice"
    RECOMMENDATIONSERVICE_TAG: "eshopimages.azurecr.io/eshop/recommendationservice"
    SHIPPINGSERVICE_TAG: "eshopimages.azurecr.io/eshop/shippingservice"
  only:
    - master  # Define the branch to trigger this job






